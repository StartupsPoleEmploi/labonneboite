# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  #config.ssh.private_key_path = "~/.ssh/id_rsa"
  # need to manually add the key in the authorized_keys of the ssh config of the guest for this to work.
  config.ssh.forward_agent = true
  #config.ssh.insert_key = true

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

	# the repo folder on your host machine (..)
	# will be synced with the /srv/lbb folder on guest machine
	# so that you can keep using your usual editor on your host
	# and still have changes instantly reflected in your dev app
  config.vm.synced_folder "..", "/srv/lbb"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine.
	# redirect port of flask server
  config.vm.network "forwarded_port", guest: 5000, host: 8090
  # redirect port of locust load testing web interface
  config.vm.network "forwarded_port", guest: 8089, host: 8089
	# redirect port of Elastic Search
  config.vm.network "forwarded_port", guest: 9200, host: 9200

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |v|
  host = RbConfig::CONFIG['host_os']

  # set total memory size 'mem' to a number of KB
  # and set 'cpus' to the number of cpu cores on the host
  if host =~ /darwin/
    # sysctl returns Bytes and we convert it to KB
    mem = `sysctl -n hw.memsize`.to_i / 1024
    cpus = `sysctl -n hw.ncpu`.to_i
  elsif host =~ /linux/
    # meminfo shows KB
    mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i
    cpus = `nproc`.to_i
  elsif host =~ /mswin|mingw|cygwin/
    # Windows code via https://github.com/rdsubhas/vagrant-faster
    mem = `wmic computersystem Get TotalPhysicalMemory`.split[1].to_i / 1024
    cpus = 2
  end

  # convert 'mem' to MB then give VM 1/4 of total system memory 
  mem = mem / 1024 / 4
  v.customize ["modifyvm", :id, "--memory", mem]

  # give access to all cpu cores on the host
  v.customize ["modifyvm", :id, "--cpus", cpus]
end

  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "playbook.yml"
  end
end
